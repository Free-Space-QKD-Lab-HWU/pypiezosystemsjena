{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyPiezosystemsJena","text":""},{"location":"#about","title":"About","text":"<p>PyPiezosystemsJena is a Python library to interface with NV200D/Net controllers from Piezosystems Jena. This has been developed as part of the Hub Optical  Ground Station, HOGS, at the Free-Space QKD Lab in Heriot-Watt University. The development of this library is for the design and control of a fine-steering system for incoming light collected by the ground-station.</p> <p>The library wraps the various serial commands required to communicate with the NV200D controllers and provide a convenient Python class to operate the device. Full details of the functionality covered and how to use it can be found in the api reference, examples are also included in the api reference. For a more general usage guide please see the guides section.</p>"},{"location":"#installation","title":"Installation","text":"<p>This library is currently not available on PyPi but you can still install it via pip with the following: </p> <pre><code>pip install git+https://github.com/Free-Space-QKD-Lab-HWU/pypiezosystemsjena.git\n</code></pre>"},{"location":"#developing","title":"Developing","text":"<p>For developers the following should suffice, clone the repo and install the library as a development build, this way you can write new features and have them available the next time you import the library.</p> <p>Clone the repository: <pre><code>git clone https://github.com/Free-Space-QKD-Lab-HWU/pypiezosystemsjena.git\ncd pypiezosystemsjena\n</code></pre></p> <p>And then run a development build: <pre><code>python3 -m pip install -e .\n</code></pre></p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>A connection to a Piezosystems Jena NV200D/Net can be opened as follows:</p> <p>Example</p> <pre><code>import pypiezosystemsjena as psj\n\nnv = psj.NV200D(psj.Connection.usb, port=\"/dev/ttyUSB1\")\n\nprint(nv)\n</code></pre> <p>If the above is successful you should see the following, good luck! P.S. don't forget to check the guides for usage tips.</p> <p>Success</p> <pre><code>NV200D attached on /dev/ttyUSB0\nDevice status:\n               actuator connected : True\n                      sensor type : SensorType.capacitve_sensor\n                        loop mode : LoopMode.closed\n              notch filter active : False\n         signal processing active : True\n       amplifier channels bridged : True\n             temperature too high : False\n                   actuator error : False\n                   hardware error : False\n                        i2c error : False\nlower control value limit reached : False\nupper control value limit reached : False\n          Temperature (heat sink) : 28.677 C\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#pypiezosystemsjena.NV200D","title":"pypiezosystemsjena.NV200D","text":"<pre><code>NV200D(connection: Connection, port: str = None, ip_address: str = None, mac_address: str = None, timeout: float = 0.2)\n</code></pre> <p>A wrapper for class for the Piezosystems Jena NV200D (Net) piezo controller</p> <p>Parameters:</p> <ul> <li> <code>connection</code>               (<code>Connection</code>)           \u2013            <p>type of connection with device</p> </li> <li> <code>port</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>serial port</p> </li> <li> <code>ip_address</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>i.p. address to find device</p> </li> <li> <code>mac_address</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>mac address to search for</p> </li> <li> <code>timeout</code>               (<code>Optional[float]</code>, default:                   <code>0.2</code> )           \u2013            <p>timeout for commands over serial connections</p> </li> </ul> <p>Examples:</p> <p>Connection to an NV200 can be done via either serial or telnet.</p> Serial PortI.P. AddressSearch by MAC address <pre><code>nv = NV200D(psj.Connection.usb, port=\"/dev/ttyUSB0\")\n</code></pre> <pre><code>nv = NV200D(psj.Connection.ethernet, ip_address=\"192.168.188.71\")\n</code></pre> <pre><code># i.p. address of network the controller is attached to\nbase_ip_address = \"192.168.188.71\"\n\nMAC_address = \"00:00:00:00:00:0A\"\n\nnv = NV200D(Connection.ethernet,\n            ip_address=base_ip_address,\n            mac_address=MAC_address)\n</code></pre>"},{"location":"api/#pypiezosystemsjena.NV200D-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.NV200D.PID_feedforward_control_amplification","title":"PID_feedforward_control_amplification  <code>property</code> <code>writable</code>","text":"<pre><code>PID_feedforward_control_amplification: Tuple[float, float, float]\n</code></pre> <p>Feed forward control amplification for position, velocity and acceleration</p> <p>Returns:</p> <ul> <li> <code>Tuple[float, float, float]</code>           \u2013            <p>A tuple of PID factors in the order (            position, velocity, acceleration)</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.PID_mode","title":"PID_mode  <code>property</code> <code>writable</code>","text":"<pre><code>PID_mode: LoopMode\n</code></pre> <p>PID open or closed loop mode</p>"},{"location":"api/#pypiezosystemsjena.NV200D.control_mode","title":"control_mode  <code>property</code> <code>writable</code>","text":"<pre><code>control_mode: ControlMode\n</code></pre> <p>Access control mode of NV200D</p>"},{"location":"api/#pypiezosystemsjena.NV200D.data_recorder_autostart","title":"data_recorder_autostart  <code>property</code> <code>writable</code>","text":"<pre><code>data_recorder_autostart: DataRecorderStartMode\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.data_recorder_buffer_length","title":"data_recorder_buffer_length  <code>property</code>","text":"<pre><code>data_recorder_buffer_length: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.data_recorder_source","title":"data_recorder_source  <code>property</code> <code>writable</code>","text":"<pre><code>data_recorder_source: Tuple[DataRecorderBuffer, DataRecorderSource]\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.data_recorder_stride","title":"data_recorder_stride  <code>property</code> <code>writable</code>","text":"<pre><code>data_recorder_stride: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.fenable","title":"fenable  <code>property</code> <code>writable</code>","text":"<pre><code>fenable: bool\n</code></pre> <p>Enable cycling through entire piezo voltage range during startup</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_desired_position_profile_frequency_domain","title":"ilc_desired_position_profile_frequency_domain  <code>property</code>","text":"<pre><code>ilc_desired_position_profile_frequency_domain\n</code></pre> <p>Desired position profile in frequency domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_learning_function_frequency_domain","title":"ilc_learning_function_frequency_domain  <code>property</code>","text":"<pre><code>ilc_learning_function_frequency_domain\n</code></pre> <p>Learning function in frequency domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_learning_limit","title":"ilc_learning_limit  <code>property</code> <code>writable</code>","text":"<pre><code>ilc_learning_limit: float\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_learning_rate","title":"ilc_learning_rate  <code>property</code> <code>writable</code>","text":"<pre><code>ilc_learning_rate: float\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_measured_position_profile_frequency_domain","title":"ilc_measured_position_profile_frequency_domain  <code>property</code>","text":"<pre><code>ilc_measured_position_profile_frequency_domain\n</code></pre> <p>Measured position profile in frequency domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_number_of_basic_scans","title":"ilc_number_of_basic_scans  <code>property</code> <code>writable</code>","text":"<pre><code>ilc_number_of_basic_scans: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_number_of_frequency_components","title":"ilc_number_of_frequency_components  <code>property</code> <code>writable</code>","text":"<pre><code>ilc_number_of_frequency_components: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_number_of_subsamples","title":"ilc_number_of_subsamples  <code>property</code> <code>writable</code>","text":"<pre><code>ilc_number_of_subsamples: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_piezo_current_profile_1_profile","title":"ilc_piezo_current_profile_1_profile  <code>property</code>","text":"<pre><code>ilc_piezo_current_profile_1_profile\n</code></pre> <p>Piezo current_profile_1 profile in time domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_piezo_current_profile_2_profile","title":"ilc_piezo_current_profile_2_profile  <code>property</code>","text":"<pre><code>ilc_piezo_current_profile_2_profile\n</code></pre> <p>Piezo current_profile_2 profile in time domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_piezo_measured_position_profile","title":"ilc_piezo_measured_position_profile  <code>property</code>","text":"<pre><code>ilc_piezo_measured_position_profile\n</code></pre> <p>Piezo measured_position profile in time domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_piezo_voltage_profile","title":"ilc_piezo_voltage_profile  <code>property</code>","text":"<pre><code>ilc_piezo_voltage_profile\n</code></pre> <p>Piezo voltage profile in time domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.ilc_voltage_profile_frequency_domain","title":"ilc_voltage_profile_frequency_domain  <code>property</code>","text":"<pre><code>ilc_voltage_profile_frequency_domain\n</code></pre> <p>Voltage profile in frequency domain</p>"},{"location":"api/#pypiezosystemsjena.NV200D.initial_actuator_position","title":"initial_actuator_position  <code>property</code> <code>writable</code>","text":"<pre><code>initial_actuator_position: int\n</code></pre> <p>Initial actuator position after power-up</p>"},{"location":"api/#pypiezosystemsjena.NV200D.lower_motion_range_limit","title":"lower_motion_range_limit  <code>property</code>","text":"<pre><code>lower_motion_range_limit: float\n</code></pre> <p>Lower motion range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.lower_voltage_range_limit","title":"lower_voltage_range_limit  <code>property</code>","text":"<pre><code>lower_voltage_range_limit: float\n</code></pre> <p>Lower voltage range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.measured_current","title":"measured_current  <code>property</code>","text":"<pre><code>measured_current: Tuple[float, float]\n</code></pre> <p>Measured piezo current on each channel</p>"},{"location":"api/#pypiezosystemsjena.NV200D.modulation_source","title":"modulation_source  <code>property</code> <code>writable</code>","text":"<pre><code>modulation_source: ModulationSource\n</code></pre> <p>Source of signal for setpoint</p>"},{"location":"api/#pypiezosystemsjena.NV200D.monitor_source","title":"monitor_source  <code>property</code> <code>writable</code>","text":"<pre><code>monitor_source: MonitorSource\n</code></pre> <p>Source of data for analogue output</p>"},{"location":"api/#pypiezosystemsjena.NV200D.recording","title":"recording  <code>property</code> <code>writable</code>","text":"<pre><code>recording: bool\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.set_point","title":"set_point  <code>property</code> <code>writable</code>","text":"<pre><code>set_point: float\n</code></pre> <p>Actuator position to move to</p>"},{"location":"api/#pypiezosystemsjena.NV200D.slew_rate","title":"slew_rate  <code>property</code> <code>writable</code>","text":"<pre><code>slew_rate: float\n</code></pre> <p>Maximum slew rate</p>"},{"location":"api/#pypiezosystemsjena.NV200D.spi_control_loop_interupt_source","title":"spi_control_loop_interupt_source  <code>property</code> <code>writable</code>","text":"<pre><code>spi_control_loop_interupt_source: SPIControlLoopInterupt\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.status","title":"status  <code>property</code>","text":"<pre><code>status: dict\n</code></pre> <p>Get the current status of the controller</p>"},{"location":"api/#pypiezosystemsjena.NV200D.temperature","title":"temperature  <code>property</code>","text":"<pre><code>temperature: float\n</code></pre> <p>Heat sink temperature</p>"},{"location":"api/#pypiezosystemsjena.NV200D.trigger_input_function","title":"trigger_input_function  <code>property</code> <code>writable</code>","text":"<pre><code>trigger_input_function: TriggerInputFunction\n</code></pre> <p>Function to run on trigger input</p>"},{"location":"api/#pypiezosystemsjena.NV200D.triggering_edge","title":"triggering_edge  <code>property</code> <code>writable</code>","text":"<pre><code>triggering_edge: TriggerEdge\n</code></pre> <p>Which edge to trigger on</p>"},{"location":"api/#pypiezosystemsjena.NV200D.upper_motion_range_limit","title":"upper_motion_range_limit  <code>property</code>","text":"<pre><code>upper_motion_range_limit: float\n</code></pre> <p>Upper motion range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.upper_voltage_range_limit","title":"upper_voltage_range_limit  <code>property</code>","text":"<pre><code>upper_voltage_range_limit: float\n</code></pre> <p>Upper voltage range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D-functions","title":"Functions","text":""},{"location":"api/#pypiezosystemsjena.NV200D.apply_voltage","title":"apply_voltage","text":"<pre><code>apply_voltage(voltage: float)\n</code></pre> <p>Voltage sent to the controller to apply to the acutator.</p> <p>Requires that the the controller is operating in open-loop mode and will throw an assertion error otherwise. Voltages passed to this function are also required to be within the voltage range of controller, these can be found through <code>NV200D.lower_voltage_range_limit</code> for the lower limit and <code>NV200D.upper_voltage_range_limit</code> for the upper limit.</p> <p>Parameters:</p> <ul> <li> <code>voltage</code>               (<code>float</code>)           \u2013            <p>set point for controller in volts</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.go_to_position","title":"go_to_position","text":"<pre><code>go_to_position(position: float)\n</code></pre> <p>Position sent to controller to move the acutator to.</p> <p>Requires that the the controller is operating in closed-loop mode and will throw an assertion error otherwise. Positions passed to this function are also required to be within the movement range of controller, these can be found through <code>NV200D.lower_motion_range_limit</code> for the lower limit and <code>NV200D.upper_motion_range_limit</code> for the upper limit.</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>float</code>)           \u2013            <p>set point for controller in mrad or \u00b5m</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.read_data_recorder","title":"read_data_recorder","text":"<pre><code>read_data_recorder(channel: DataRecorderBuffer, index: Optional[int] = None, length: Optional[int] = None)\n</code></pre> <p>Read the data from the buffer on chosen channel.</p> <p>If index and length are not supplied the entire contents of the buffer        will read out for the chosen buffer.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>               (<code>DataRecorderBuffer</code>)           \u2013            <p>data buffer</p> </li> <li> <code>index</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>first value to read out of buffer</p> </li> <li> <code>length</code>               (<code>Optional[int</code>, default:                   <code>None</code> )           \u2013            <p>number of values to read out of buffer</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[float]</code>           \u2013            <p>list of recorded data</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.TipTilt","title":"pypiezosystemsjena.TipTilt","text":"<pre><code>TipTilt(axis_x_connection: ControllerID, axis_y_connection: ControllerID)\n</code></pre> <p>Combines a pair of NV200D (Net) piezo controllers, providing joint control over a both x and y axes.</p> <p>Parameters:</p> <ul> <li> <code>axis_x_connection</code>               (<code>ControllerID</code>)           \u2013            <p>connection details for x-axis</p> </li> <li> <code>axis_y_connection</code>               (<code>ControllerID</code>)           \u2013            <p>connection details for y-axis</p> </li> </ul> <p>Examples:</p> <p>Connect to two network attached NV200D driving a single mirror mount. <pre><code>from pypiezosystemsjena import find_device,  TipTilt\n\n# i.p. address of network adapter controllers are attached to\nbase_ip = \"169.254.1.1\"\n\n# MAC addresses of controllers connected to mirror\nmac_addresses = {\n    \"x\": \"00:00:00:00:00:0A,\n    \"y\": \"00:00:00:00:00:0B,\n}\n\n# get pairs of matching ip and mac address\ncontroller_ids = find_device(mac_addresses, base_ip)\n\nmirror = TipTilt(controller_ids[\"x\"], controller_ids[\"y\"])\n</code></pre></p> <p>Set closed-loop control <pre><code>from pypiezosystemsjena import LoopMode\nmirror.loop_mod = LoopMode.closed\n</code></pre></p> <p>Set a position to move the mirror to. This will depend on the type of  control loop that has been chosen, as open loop control (default) expects set points to defined as voltages whereas closed-loop control allows the user to define set points in terms of positions with units defined by the type of piezo device attached to the controllers. Examples for both are given below:</p> Closed-loop control (mrad or \u00b5m)Open-loop control (V) <pre><code>from pypiezosystemsjena import LoopMode, ModulationSource\n\n# positions in mrad or \u00b5m require closed loop operation\nmirror.loop_mod = LoopMode.closed\nmirror.modulation_source = ModulationSource.usb_or_ethernet\n\npos_x = 0.5\npos_y = -0.1\n\nmirror.go_to_position(pos_x, pos_y)\n</code></pre> <pre><code>from pypiezosystemsjena import LoopMode, ModulationSource\n\n# positions in volts require open loop operation\nmirror.loop_mod = LoopMode.open\nmirror.modulation_source = ModulationSource.usb_or_ethernet\n\nvoltage_x = 10\nvoltage_y = 50\n\nmirror.apply_voltage(voltage_x, voltage_y)\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TipTilt-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.TipTilt.loop_mode","title":"loop_mode  <code>property</code> <code>writable</code>","text":"<pre><code>loop_mode: Dict[str, LoopMode]\n</code></pre> <p>Control mode both axes are set to</p>"},{"location":"api/#pypiezosystemsjena.TipTilt.modulation_source","title":"modulation_source  <code>property</code> <code>writable</code>","text":"<pre><code>modulation_source: ModulationSource\n</code></pre> <p>Modulation source for both axes</p>"},{"location":"api/#pypiezosystemsjena.TipTilt-functions","title":"Functions","text":""},{"location":"api/#pypiezosystemsjena.TipTilt.apply_voltage","title":"apply_voltage","text":"<pre><code>apply_voltage(voltage_x: float, voltage_y: float)\n</code></pre> <p>Set voltage applied to both axes Args:     voltage_x (float): set point for x-axis     voltage_y (float): set point for y-axis</p>"},{"location":"api/#pypiezosystemsjena.TipTilt.go_to_position","title":"go_to_position","text":"<pre><code>go_to_position(position_x: float, position_y: float)\n</code></pre> <p>Position to set both axes to Args:     position_x (float): set point for x-axis     position_y (float): set point for y-axis</p>"},{"location":"api/#pypiezosystemsjena.list_status_codes","title":"pypiezosystemsjena.list_status_codes","text":"<pre><code>list_status_codes(status: int) -&gt; List[int]\n</code></pre> <p>Convert status bitset to list of active status codes</p> <p>The NV200D controller maintains its status as a 16bit register of bit flags.    For each high bit found in the bit set we return an integer from 0-15 to     represent the relevent status code found.</p> <p>Parameters:</p> <ul> <li> <code>status</code>               (<code>int</code>)           \u2013            <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[int]</code>           \u2013            <p>list of active codes</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.current_status","title":"pypiezosystemsjena.current_status","text":"<pre><code>current_status(status: int) -&gt; dict\n</code></pre> <p>Parse NV200D statuse to dictionary of active statuses</p> <p>Convert the result of NV200D.status to a dictionary of all status codes     that could be available</p> <p>Parameters:</p> <ul> <li> <code>status</code>               (<code>int</code>)           \u2013            <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>active statuses</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.Connection","title":"pypiezosystemsjena.Connection","text":"<p>               Bases: <code>Enum</code></p> <p>Connection type for NV200D</p> <p>Used to specify use of serial port or network connection</p>"},{"location":"api/#pypiezosystemsjena.Connection-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.Connection.ethernet","title":"ethernet  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ethernet = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.Connection.usb","title":"usb  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>usb = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ControlMode","title":"pypiezosystemsjena.ControlMode","text":"<p>               Bases: <code>Enum</code></p> <p>Active control mode of NV200D</p>"},{"location":"api/#pypiezosystemsjena.ControlMode-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.ControlMode.feedback","title":"feedback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>feedback = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ControlMode.feedforward","title":"feedforward  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>feedforward = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ControlMode.identification","title":"identification  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identification = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ControlMode.pid","title":"pid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pid = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SensorType","title":"pypiezosystemsjena.SensorType","text":"<p>               Bases: <code>Enum</code></p> <p>Type of sensor fitted to current attached piezo device</p>"},{"location":"api/#pypiezosystemsjena.SensorType-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.SensorType.actuator_without_position_sensor","title":"actuator_without_position_sensor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>actuator_without_position_sensor = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SensorType.capacitve_sensor","title":"capacitve_sensor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capacitve_sensor = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SensorType.strain_guage_sensor","title":"strain_guage_sensor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strain_guage_sensor = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.LoopMode","title":"pypiezosystemsjena.LoopMode","text":"<p>               Bases: <code>Enum</code></p> <p>Open or closed loop operation</p>"},{"location":"api/#pypiezosystemsjena.LoopMode-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.LoopMode.closed","title":"closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>closed = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.LoopMode.open","title":"open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>open = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ModulationSource","title":"pypiezosystemsjena.ModulationSource","text":"<p>               Bases: <code>Enum</code></p> <p>Source of control signal for device setpoint</p>"},{"location":"api/#pypiezosystemsjena.ModulationSource-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.ModulationSource.analogue_in","title":"analogue_in  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>analogue_in = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ModulationSource.awg","title":"awg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>awg = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ModulationSource.spi","title":"spi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>spi = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ModulationSource.usb_or_ethernet","title":"usb_or_ethernet  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>usb_or_ethernet = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource","title":"pypiezosystemsjena.MonitorSource","text":"<p>               Bases: <code>Enum</code></p> <p>Source of data for analogue output</p>"},{"location":"api/#pypiezosystemsjena.MonitorSource-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.MonitorSource.absolute_position_error","title":"absolute_position_error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>absolute_position_error = 4\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.piezo_current_1","title":"piezo_current_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_current_1 = 6\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.piezo_current_2","title":"piezo_current_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_current_2 = 7\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.piezo_voltage","title":"piezo_voltage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_voltage = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.position_close_loop","title":"position_close_loop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_close_loop = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.position_error","title":"position_error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_error = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.position_open_loop","title":"position_open_loop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_open_loop = 5\n</code></pre>"},{"location":"api/#pypiezosystemsjena.MonitorSource.setpoint","title":"setpoint  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>setpoint = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ArbitraryWaveformGeneratorRun","title":"pypiezosystemsjena.ArbitraryWaveformGeneratorRun","text":"<p>               Bases: <code>Enum</code></p> <p>Set whether to start or stop the AWG</p>"},{"location":"api/#pypiezosystemsjena.ArbitraryWaveformGeneratorRun-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.ArbitraryWaveformGeneratorRun.start","title":"start  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.ArbitraryWaveformGeneratorRun.stop","title":"stop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderBuffer","title":"pypiezosystemsjena.DataRecorderBuffer","text":"<p>               Bases: <code>Enum</code></p> <p>Which data buffer to read from</p>"},{"location":"api/#pypiezosystemsjena.DataRecorderBuffer-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.DataRecorderBuffer.a","title":"a  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>a = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderBuffer.b","title":"b  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>b = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource","title":"pypiezosystemsjena.DataRecorderSource","text":"<p>               Bases: <code>Enum</code></p> <p>Source of data to be stored in data recorder buffer</p>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.DataRecorderSource.abs_position_error","title":"abs_position_error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>abs_position_error = 4\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.piezo_current_1","title":"piezo_current_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_current_1 = 6\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.piezo_current_2","title":"piezo_current_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_current_2 = 7\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.piezo_position","title":"piezo_position  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_position = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.piezo_position_2","title":"piezo_position_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_position_2 = 5\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.piezo_voltage","title":"piezo_voltage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_voltage = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.position_error","title":"position_error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_error = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderSource.setpoint","title":"setpoint  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>setpoint = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderStartMode","title":"pypiezosystemsjena.DataRecorderStartMode","text":"<p>               Bases: <code>Enum</code></p> <p>Autostart mode of data recorder</p>"},{"location":"api/#pypiezosystemsjena.DataRecorderStartMode-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.DataRecorderStartMode.grun","title":"grun  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grun = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderStartMode.off","title":"off  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>off = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.DataRecorderStartMode.set","title":"set  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>set = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction","title":"pypiezosystemsjena.TriggerInputFunction","text":"<p>               Bases: <code>Enum</code></p> <p>Function to run on trigger input</p>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.TriggerInputFunction.awg_start","title":"awg_start  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>awg_start = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction.awg_step","title":"awg_step  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>awg_step = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction.awg_sync","title":"awg_sync  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>awg_sync = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction.ilc_sync","title":"ilc_sync  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ilc_sync = 4\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction.none","title":"none  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>none = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerInputFunction.start_data_recorder","title":"start_data_recorder  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_data_recorder = 5\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerEdge","title":"pypiezosystemsjena.TriggerEdge","text":"<p>               Bases: <code>Enum</code></p> <p>Edge to trigger on</p>"},{"location":"api/#pypiezosystemsjena.TriggerEdge-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.TriggerEdge.both","title":"both  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>both = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerEdge.falling","title":"falling  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>falling = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerEdge.off","title":"off  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>off = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.TriggerEdge.rising","title":"rising  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rising = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor","title":"pypiezosystemsjena.SPIMonitor","text":"<p>               Bases: <code>Enum</code></p> <p>Return value for SPI monitor</p>"},{"location":"api/#pypiezosystemsjena.SPIMonitor-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.SPIMonitor.abs_position_error","title":"abs_position_error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>abs_position_error = 5\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.piezo_current_1","title":"piezo_current_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_current_1 = 7\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.piezo_current_2","title":"piezo_current_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_current_2 = 8\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.piezo_voltage","title":"piezo_voltage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>piezo_voltage = 3\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.position_closed_loop","title":"position_closed_loop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_closed_loop = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.position_error","title":"position_error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_error = 4\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.position_open_loop","title":"position_open_loop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>position_open_loop = 6\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.setpoint","title":"setpoint  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>setpoint = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIMonitor.zero","title":"zero  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>zero = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIControlLoopInterupt","title":"pypiezosystemsjena.SPIControlLoopInterupt","text":"<p>               Bases: <code>Enum</code></p> <p>PID control loop interupt source</p>"},{"location":"api/#pypiezosystemsjena.SPIControlLoopInterupt-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.SPIControlLoopInterupt.interal","title":"interal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>interal = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPIControlLoopInterupt.spi","title":"spi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>spi = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPISetpoint","title":"pypiezosystemsjena.SPISetpoint","text":"<p>               Bases: <code>Enum</code></p> <p>Datatype of last received setpoint over SPI</p>"},{"location":"api/#pypiezosystemsjena.SPISetpoint-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.SPISetpoint.decimal","title":"decimal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>decimal = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPISetpoint.hex","title":"hex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hex = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.SPISetpoint.stroke_or_voltage","title":"stroke_or_voltage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stroke_or_voltage = 2\n</code></pre>"},{"location":"api/#pypiezosystemsjena.LearningCorrectionType","title":"pypiezosystemsjena.LearningCorrectionType","text":"<p>               Bases: <code>Enum</code></p> <p>Correction type in frequency domain of itertive learning control method</p>"},{"location":"api/#pypiezosystemsjena.LearningCorrectionType-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.LearningCorrectionType.no_learning","title":"no_learning  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>no_learning = 0\n</code></pre>"},{"location":"api/#pypiezosystemsjena.LearningCorrectionType.offline_identification","title":"offline_identification  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>offline_identification = 1\n</code></pre>"},{"location":"api/#pypiezosystemsjena.LearningCorrectionType.online_identification","title":"online_identification  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>online_identification = 2\n</code></pre>"},{"location":"cookbook/","title":"Cookbook","text":""},{"location":"cookbook/#connecting-to-controllers","title":"Connecting to controllers","text":"<p>Communication with the NV200D controller can be handled over either serial (via a usb connection) or over telnet (via ethernet). The <code>NV200D</code> class in this library provides both methods to connect to these controllers along with a means to find the correct i.p. address of a controller attached to the same network your computer is on by searching for the controllers MAC address. In each of these examples the user is requried to to use the <code>Connection</code> enum class in order to specifiy the correct type of connection that is to be established.</p>"},{"location":"cookbook/#connecting-over-serial-usb","title":"Connecting over serial (USB)","text":"<p>As an example, connecting over serial can be done as follows. Here  <code>/dev/ttyUSB1</code> corresponds to serial-over-usb port 1 when using Linux, for  Windows this is this instead might be <code>COM1</code>.</p> <p>Example</p> <pre><code>from pypiezosystemsjena import NV200D, Connection\n\nnv200d = NV200D(psj.Connection.usb, port=\"/dev/ttyUSB1\")\n\nprint(nv200d)\n</code></pre>"},{"location":"cookbook/#connecting-over-the-network","title":"Connecting over the network","text":"<p>Alternatively if the NV200D is attached to the network and its i.p. address is known then a connection can be made like so.</p> <p>Example</p> <pre><code>from pypiezosystemsjena import NV200D, Connection\n\nnv200d = NV200D(Connection.ethernet, ip_address=\"192.168.188.71\")\n\nprint(nv200d)\n</code></pre>"},{"location":"cookbook/#searching-via-mac-address","title":"Searching via MAC address","text":"<p>As a final option, if the controller is attached to the network but you can meet the following conditions:</p> <ol> <li>You know the MAC address of the controller (found on a sticker on the underside fo the controller)</li> <li>You know the address of the network that both your computer and the controller are connected to</li> </ol> <p>If this is the case then you can use the i.p. address of the network and the MAC address of the controller to establish a connection.</p> <p>Example</p> <pre><code>from pypiezosystemsjena import NV200D, Connection\n\n# i.p. address of network the controller is attached to\nbase_ip_address = \"192.168.188.71\"\n\nMAC_address = \"00:00:00:00:00:0A\"\n\nnv200d = NV200D(\n            Connection.ethernet,\n            ip_address=base_ip_address,\n            mac_address=MAC_address)\n\nprint(nv200d)\n</code></pre>"},{"location":"cookbook/#finding-controllers-on-the-network","title":"Finding controllers on the network","text":"<p>A typical use case of these controllers would involve having multiple of them connected to the same network. For example the network layout below might look familiar to you scenario where you have perhaps a pair of mirrors to control requiring four independent controllers that are all then connected to a router or an ethernet switch.</p> <pre><code>graph TB\n    subgraph Network\n    B[Router or Switch]\n    end\n\n    subgraph Mirror 1\n    C[X-axis] &lt;-.-&gt; B;\n    D[Y-axis] &lt;-.-&gt; B;\n    end\n\n    subgraph Mirror 2\n    E[X-axis] &lt;-.-&gt; B;\n    F[Y-axis] &lt;-.-&gt; B;\n    end\n\n    A[My Computer] &lt;---&gt; B[Router or Switch];</code></pre> <p>The problem we face in using the controllers like this is finding the correct i.p. address of each of them to connect to. Fortunately each controller has a unique identifier in the form of a MAC address, for the NV200D/Net modules  you should be able to find this on a sticker on the controllers underside.</p> <p>This library comes with a utility to match each MAC address with its corresponding i.p. address on the network. For convenience it also requires that you supply a label for each of the MAC address you search for to help with identifying and distibguishing bewtween them later.</p> <p>This functionality can be used like so:</p> <p>Example</p> <pre><code>from pypiezosystemsjena import find_device\n\n# dictionary of labels and MAC address\nmac_addresses = {\n    \"x1\": \"00:00:00:00:00:0A\",\n    \"y1\": \"00:00:00:00:00:0B\",\n    \"x2\": \"00:00:00:00:00:0C\",\n    \"y2\": \"00:00:00:00:00:0D\",\n}\n\n# i.p. address of your network, in this case we have are connected to a\n# switch, if you were instead connected to a router this might instead be    \n# \"home\" i.e. 192.168.0.1\nbase_ip = \"169.254.166.227\"\n\ncontroller_ids = find_device(mac_addresses, base_ip)\nprint(controller_ids)\n</code></pre> <p>If this was successful you will see the contents of a dictionary, much like the one shown below.</p> <p>Success</p> <pre><code>{\n    'x1':ControllerID(\n        label='x1',\n        connection_type=&lt;Connection.ethernet: 2&gt;,\n        connection_details=NetworkConnection(\n            MAC_address='00:00:00:00:00:0A',\n            ip_address='169.254.2.2\n            )\n        ),\n    'y1':ControllerID(\n        label='y1',\n        connection_type=&lt;Connection.ethernet: 2&gt;,\n        connection_details=NetworkConnection(\n            MAC_address='00:00:00:00:00:0B',\n            ip_address='169.254.2.3\n            )\n        ),\n    'x2':ControllerID(\n        label='x2',\n        connection_type=&lt;Connection.ethernet: 2&gt;,\n        connection_details=NetworkConnection(\n            MAC_address='00:00:00:00:00:0C',\n            ip_address='169.254.2.4\n            )\n        ),\n    'y2':ControllerID(\n        label='y2',\n        connection_type=&lt;Connection.ethernet: 2&gt;,\n        connection_details=NetworkConnection(\n            MAC_address='00:00:00:00:00:0D',\n            ip_address='169.254.2.5\n            )\n        ),\n}\n</code></pre>"},{"location":"cookbook/#tip-tilt-stages","title":"Tip-Tilt stages","text":"<p>Tip-Tilt stages are a common use for these controllers and require that a pair of them are used in tandem, one for each axis. Configuration and use of devices used in this way can be made simpler by use of the <code>TipTilt</code> class. Creating a <code>TipTilt</code> object can be done as shown below by searching using the i.p. addresses of the target devices, here those are found by searching for their respective MAC addresses.</p> <p>Example</p> <pre><code>from pypiezosystemsjena import find_device, LoopMode, ModulationSource, TipTilt\n\n# dictionary of labels and MAC address\nmac_addresses = {\n    \"x\": \"00:00:00:00:00:0A\",\n    \"y\": \"00:00:00:00:00:0B\",\n}\n\n# i.p. address of your network, in this case we have are connected to a\n# switch, if you were instead connected to a router this might instead be    \n# \"home\" i.e. 192.168.0.1\nbase_ip = \"169.254.166.227\"\n\n# find our controllers\ncontroller_ids = find_device(mac_addresses, base_ip)\n\n# using our \"x\" and \"y\" labels we can conveniently construct a TipTilt\n# mirror with correctly aligned axes\ntip_tilt_mirror = TipTilt(controller_ids[\"x\"], controller_ids[\"y\"])\n\n# closed loop so we can set positions in mrad\ntip_tilt_mirror.loop_mode = LoopMode.closed\n\n# set modulation source as \"usb_or_ethernet\" to allow serial control of position\ntip_tilt_mirror.modulation_source = ModulationSource.usb_or_ethernet\n</code></pre> <p>The two arguments of the <code>TipTilt</code> class are identifiers containing a label, a connection type and details of the connection. From this it is then made convenient to for example connect one axis over serial and the other over ethernet should that be required. The identifier has the following structure:</p> <pre><code>@dataclass(frozen=True)\nclass ControllerID:\n    label: str\n    connection_type: Connection\n    connection_details: Union[str, NetworkConnection]\n</code></pre> <p>As an example, the <code>TipTilt</code> object can be made to move in a circular motion. For this the motion (or voltage in open-loop operation) ranges are needed for the axes. In the case of closed-loop operation this is relatively straight forward as the motion range is symmetric about its centre. Here we define our angles from 0 to 2\\(\\pi\\) and then scale them accordingly. We can then iterate through each position and send them those acuator positions to the controller.</p> <p>Example</p> <pre><code>import numpy as np\n\nangles = np.linspace(0, 2*np.pi, 1000)\n\nsine = np.sin(angles)\nsine = sine / np.max(sine)\nsine = sine * tip_tilt_mirror.axis_x.upper_motion_range_limit\n\ncosine = np.cos(angles)\ncosine = cosine / np.max(cosine)\ncosine = cosine * tip_tilt_mirror.axis_y.upper_motion_range_limit\n\nfor i in range(angles.size):\n    tip_tilt_mirror.go_to_position(sine[i], cosine[i])\n\n# Alternatively you could use zip instead of tracking an index\nfor s, c in zip(sine, cosine): \n    tip_tilt_mirror.go_to_position(s, c)\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Free-Space-QKD-Lab-HWU</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}