{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"api/","title":"API Reference","text":"<p>=== Opening the device <pre><code>import pypiezosystemsjena.NV200D as psj\n\nnv = psj.NV200D(psj.Connection.usb, port=\"/dev/ttyUSB1\")\n\nprint(nv)\n</code></pre></p> <p>=== Result <pre><code>NV200D attached on /dev/ttyUSB0\nDevice status:\n               actuator connected : True\n                      sensor type : SensorType.capacitve_sensor\n                        loop mode : LoopMode.closed\n              notch filter active : False\n         signal processing active : True\n       amplifier channels bridged : True\n             temperature too high : False\n                   actuator error : False\n                   hardware error : False\n                        i2c error : False\nlower control value limit reached : False\nupper control value limit reached : False\n          Temperature (heat sink) : 28.677 C\n</code></pre></p> <pre><code>options:\n    show_root_headings: true\n    show_source: false\n</code></pre>"},{"location":"api/#pypiezosystemsjena.NV200D.Connection","title":"pypiezosystemsjena.NV200D.Connection","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.ControlMode","title":"pypiezosystemsjena.NV200D.ControlMode","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.SensorType","title":"pypiezosystemsjena.NV200D.SensorType","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.LoopMode","title":"pypiezosystemsjena.NV200D.LoopMode","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.ModulationSource","title":"pypiezosystemsjena.NV200D.ModulationSource","text":"<p>             Bases: <code>Enum</code></p> <p>Source of control signal for device setpoint</p>"},{"location":"api/#pypiezosystemsjena.NV200D.MonitorSource","title":"pypiezosystemsjena.NV200D.MonitorSource","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.list_status_codes","title":"pypiezosystemsjena.NV200D.list_status_codes","text":"<pre><code>list_status_codes(status: int) -&gt; List[int]\n</code></pre> <p>Convert status bitset to list of active status codes</p> <p>The NV200D controller maintains its status as a 16bit register of bit flags.    For each high bit found in the bit set we return an integer from 0-15 to     represent the relevent status code found.</p> <p>Parameters:</p> <ul> <li> <code>status</code>             (<code>int</code>)         \u2013          <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[int]</code>         \u2013          <p>list of active codes</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.current_status","title":"pypiezosystemsjena.NV200D.current_status","text":"<pre><code>current_status(status: int) -&gt; dict\n</code></pre> <p>Parse NV200D statuse to dictionary of active statuses</p> <p>Convert the result of NV200D.status to a dictionary of all status codes     that could be available</p> <p>Parameters:</p> <ul> <li> <code>status</code>             (<code>int</code>)         \u2013          <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>active statuses</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.current_status","title":"pypiezosystemsjena.NV200D.current_status","text":"<pre><code>current_status(status: int) -&gt; dict\n</code></pre> <p>Parse NV200D statuse to dictionary of active statuses</p> <p>Convert the result of NV200D.status to a dictionary of all status codes     that could be available</p> <p>Parameters:</p> <ul> <li> <code>status</code>             (<code>int</code>)         \u2013          <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>active statuses</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D","title":"pypiezosystemsjena.NV200D.NV200D","text":"<pre><code>NV200D(\n    connection: Connection,\n    port: str = None,\n    ip_address: str = None,\n    mac_address: str = None,\n)\n</code></pre> Source code in <code>pypiezosystemsjena/NV200D.py</code> <pre><code>def __init__(self, connection: Connection,\n             port: str = None,\n             ip_address: str = None,\n             mac_address: str = None):\n\n    self.timeout = 0.25\n\n    if connection is Connection.usb:\n        if port is None:\n            raise ValueError\n        self.port = port\n        self.baudrate = 115200\n        self.connection = serial.Serial(self.port, self.baudrate,\n                                        timeout=self.timeout, xonxoff=True)\n\n    if connection is Connection.ethernet:\n        if (ip_address is None) or (mac_address is None):\n            raise ValueError\n\n        if ip_address is not None:\n            self.ip_address = ip_address\n        elif mac_address is not None:\n            self.mac_address = mac_address\n\n        self.network_port = 23\n        self.connection = telnetlib.Telnet(self.ip_address, self.network_port)\n\n    self._status = self.status\n</code></pre>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.control_mode","title":"control_mode  <code>property</code> <code>writable</code>","text":"<pre><code>control_mode: ControlMode\n</code></pre> <p>Access control mode of NV200D</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.fenable","title":"fenable  <code>property</code> <code>writable</code>","text":"<pre><code>fenable: bool\n</code></pre> <p>Enable cycling through entire piezo voltage range during startup</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.foo","title":"foo  <code>property</code> <code>writable</code>","text":"<pre><code>foo: type\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.initial_actuator_position","title":"initial_actuator_position  <code>property</code> <code>writable</code>","text":"<pre><code>initial_actuator_position: int\n</code></pre> <p>Initial actuator position after power-up</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.lower_motion_range_limit","title":"lower_motion_range_limit  <code>property</code>","text":"<pre><code>lower_motion_range_limit: float\n</code></pre> <p>Lower motion range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.lower_voltage_range_limit","title":"lower_voltage_range_limit  <code>property</code>","text":"<pre><code>lower_voltage_range_limit: float\n</code></pre> <p>Lower voltage range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.measured_current","title":"measured_current  <code>property</code>","text":"<pre><code>measured_current: Tuple[float, float]\n</code></pre> <p>Measured piezo current on each channel</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.status","title":"status  <code>property</code>","text":"<pre><code>status: dict\n</code></pre> <p>Get the current status of the controller</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.temperature","title":"temperature  <code>property</code>","text":"<pre><code>temperature: float\n</code></pre> <p>Heat sink temperature</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.upper_motion_range_limit","title":"upper_motion_range_limit  <code>property</code>","text":"<pre><code>upper_motion_range_limit: float\n</code></pre> <p>Upper motion range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.upper_voltage_range_limit","title":"upper_voltage_range_limit  <code>property</code>","text":"<pre><code>upper_voltage_range_limit: float\n</code></pre> <p>Upper voltage range limit of piezo</p>"}]}