{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyPiezosystemsJena","text":"<p>Wrapper/interface to control PSJ NV200D/Net piezo drivers</p> <p>Example</p> <pre><code>import pypiezosystemsjena.NV200D as psj\n\nnv = psj.NV200D(psj.Connection.usb, port=\"/dev/ttyUSB1\")\n\nprint(nv)\n</code></pre> <p>Success</p> <pre><code>NV200D attached on /dev/ttyUSB0\nDevice status:\n               actuator connected : True\n                      sensor type : SensorType.capacitve_sensor\n                        loop mode : LoopMode.closed\n              notch filter active : False\n         signal processing active : True\n       amplifier channels bridged : True\n             temperature too high : False\n                   actuator error : False\n                   hardware error : False\n                        i2c error : False\nlower control value limit reached : False\nupper control value limit reached : False\n          Temperature (heat sink) : 28.677 C\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#pypiezosystemsjena.NV200D.NV200D","title":"pypiezosystemsjena.NV200D.NV200D","text":"<pre><code>NV200D(\n    connection: Connection,\n    port: str = None,\n    ip_address: str = None,\n    mac_address: str = None,\n)\n</code></pre> <p>A wrapper for class for the Piezosystems Jena NV200D (Net) piezo controller</p> <p>Parameters:</p> <ul> <li> <code>connection</code>             (<code>Connection</code>)         \u2013          <p>type of connection with device</p> </li> <li> <code>port</code>             (<code>Optional[str]</code>, default:                 <code>None</code> )         \u2013          <p>serial port</p> </li> <li> <code>ip_address</code>             (<code>Optional[str]</code>, default:                 <code>None</code> )         \u2013          <p>i.p. address to find device</p> </li> <li> <code>mac_address</code>             (<code>Optional[str]</code>, default:                 <code>None</code> )         \u2013          <p>mac address to search for</p> </li> </ul> <p>Examples:</p> <p>Connection to an NV200 can be done via either serial or telnet.</p> Serial PortI.P. AddressSearch by MAC address <pre><code>nv = NV200D(psj.Connection.usb, port=\"/dev/ttyUSB0\")\n</code></pre> <pre><code>nv = NV200D(psj.Connection.ethernet, port=\"/dev/ttyUSB0\")\n</code></pre> <pre><code>nv = NV200D(psj.Connection.ethernet, mac_address=\"aa:bb:cc:dd:ee:ff:gg:hh\")\n</code></pre>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D-attributes","title":"Attributes","text":""},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.PID_feedforward_control_amplification","title":"PID_feedforward_control_amplification  <code>property</code> <code>writable</code>","text":"<pre><code>PID_feedforward_control_amplification: Tuple[\n    float, float, float\n]\n</code></pre> <p>Feed forward control amplification for position, velocity and acceleration</p> <p>Returns:</p> <ul> <li> <code>Tuple[float, float, float]</code>         \u2013          <p>A tuple of PID factors in the order (            position, velocity, acceleration)</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.PID_mode","title":"PID_mode  <code>property</code> <code>writable</code>","text":"<pre><code>PID_mode: LoopMode\n</code></pre> <p>PID open or closed loop mode</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.control_mode","title":"control_mode  <code>property</code> <code>writable</code>","text":"<pre><code>control_mode: ControlMode\n</code></pre> <p>Access control mode of NV200D</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.data_recorder_autostart","title":"data_recorder_autostart  <code>property</code> <code>writable</code>","text":"<pre><code>data_recorder_autostart: DataRecorderStartMode\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.data_recorder_buffer_length","title":"data_recorder_buffer_length  <code>property</code>","text":"<pre><code>data_recorder_buffer_length: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.data_recorder_source","title":"data_recorder_source  <code>property</code> <code>writable</code>","text":"<pre><code>data_recorder_source: Tuple[\n    DataRecorderBuffer, DataRecorderSource\n]\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.data_recorder_stride","title":"data_recorder_stride  <code>property</code> <code>writable</code>","text":"<pre><code>data_recorder_stride: int\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.fenable","title":"fenable  <code>property</code> <code>writable</code>","text":"<pre><code>fenable: bool\n</code></pre> <p>Enable cycling through entire piezo voltage range during startup</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.initial_actuator_position","title":"initial_actuator_position  <code>property</code> <code>writable</code>","text":"<pre><code>initial_actuator_position: int\n</code></pre> <p>Initial actuator position after power-up</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.lower_motion_range_limit","title":"lower_motion_range_limit  <code>property</code>","text":"<pre><code>lower_motion_range_limit: float\n</code></pre> <p>Lower motion range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.lower_voltage_range_limit","title":"lower_voltage_range_limit  <code>property</code>","text":"<pre><code>lower_voltage_range_limit: float\n</code></pre> <p>Lower voltage range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.measured_current","title":"measured_current  <code>property</code>","text":"<pre><code>measured_current: Tuple[float, float]\n</code></pre> <p>Measured piezo current on each channel</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.modulation_source","title":"modulation_source  <code>property</code> <code>writable</code>","text":"<pre><code>modulation_source: ModulationSource\n</code></pre> <p>Source of signal for setpoint</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.monitor_source","title":"monitor_source  <code>property</code> <code>writable</code>","text":"<pre><code>monitor_source: MonitorSource\n</code></pre> <p>Source of data for analogue output</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.recording","title":"recording  <code>property</code> <code>writable</code>","text":"<pre><code>recording: bool\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.slew_rate","title":"slew_rate  <code>property</code> <code>writable</code>","text":"<pre><code>slew_rate: float\n</code></pre> <p>Maximum slew rate</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.spi_control_loop_interupt_source","title":"spi_control_loop_interupt_source  <code>property</code> <code>writable</code>","text":"<pre><code>spi_control_loop_interupt_source: SPIControlLoopInterupt\n</code></pre> <p>doc</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.status","title":"status  <code>property</code>","text":"<pre><code>status: dict\n</code></pre> <p>Get the current status of the controller</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.temperature","title":"temperature  <code>property</code>","text":"<pre><code>temperature: float\n</code></pre> <p>Heat sink temperature</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.trigger_input_function","title":"trigger_input_function  <code>property</code> <code>writable</code>","text":"<pre><code>trigger_input_function: TriggerInputFunction\n</code></pre> <p>Function to run on trigger input</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.triggering_edge","title":"triggering_edge  <code>property</code> <code>writable</code>","text":"<pre><code>triggering_edge: TriggerEdge\n</code></pre> <p>Which edge to trigger on</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.upper_motion_range_limit","title":"upper_motion_range_limit  <code>property</code>","text":"<pre><code>upper_motion_range_limit: float\n</code></pre> <p>Upper motion range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.upper_voltage_range_limit","title":"upper_voltage_range_limit  <code>property</code>","text":"<pre><code>upper_voltage_range_limit: float\n</code></pre> <p>Upper voltage range limit of piezo</p>"},{"location":"api/#pypiezosystemsjena.NV200D.NV200D-functions","title":"Functions","text":""},{"location":"api/#pypiezosystemsjena.NV200D.NV200D.read_data_recorder","title":"read_data_recorder","text":"<pre><code>read_data_recorder(\n    channel: DataRecorderBuffer,\n    index: Optional[int] = None,\n    length: Optional[int] = None,\n)\n</code></pre> <p>Read the data from the buffer on chosen channel.</p> <p>If index and length are not supplied the entire contents of the buffer        will read out for the chosen buffer.</p> <p>Parameters:</p> <ul> <li> <code>channel</code>             (<code>DataRecorderBuffer</code>)         \u2013          <p>data buffer</p> </li> <li> <code>index</code>             (<code>Optional[int]</code>, default:                 <code>None</code> )         \u2013          <p>first value to read out of buffer</p> </li> <li> <code>length</code>             (<code>Optional[int</code>, default:                 <code>None</code> )         \u2013          <p>number of values to read out of buffer</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[float]</code>         \u2013          <p>list of recorded data</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.Connection","title":"pypiezosystemsjena.NV200D.Connection","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.ControlMode","title":"pypiezosystemsjena.NV200D.ControlMode","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.SensorType","title":"pypiezosystemsjena.NV200D.SensorType","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.LoopMode","title":"pypiezosystemsjena.NV200D.LoopMode","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.ModulationSource","title":"pypiezosystemsjena.NV200D.ModulationSource","text":"<p>             Bases: <code>Enum</code></p> <p>Source of control signal for device setpoint</p>"},{"location":"api/#pypiezosystemsjena.NV200D.MonitorSource","title":"pypiezosystemsjena.NV200D.MonitorSource","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"api/#pypiezosystemsjena.NV200D.list_status_codes","title":"pypiezosystemsjena.NV200D.list_status_codes","text":"<pre><code>list_status_codes(status: int) -&gt; List[int]\n</code></pre> <p>Convert status bitset to list of active status codes</p> <p>The NV200D controller maintains its status as a 16bit register of bit flags.    For each high bit found in the bit set we return an integer from 0-15 to     represent the relevent status code found.</p> <p>Parameters:</p> <ul> <li> <code>status</code>             (<code>int</code>)         \u2013          <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[int]</code>         \u2013          <p>list of active codes</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.current_status","title":"pypiezosystemsjena.NV200D.current_status","text":"<pre><code>current_status(status: int) -&gt; dict\n</code></pre> <p>Parse NV200D statuse to dictionary of active statuses</p> <p>Convert the result of NV200D.status to a dictionary of all status codes     that could be available</p> <p>Parameters:</p> <ul> <li> <code>status</code>             (<code>int</code>)         \u2013          <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>active statuses</p> </li> </ul>"},{"location":"api/#pypiezosystemsjena.NV200D.current_status","title":"pypiezosystemsjena.NV200D.current_status","text":"<pre><code>current_status(status: int) -&gt; dict\n</code></pre> <p>Parse NV200D statuse to dictionary of active statuses</p> <p>Convert the result of NV200D.status to a dictionary of all status codes     that could be available</p> <p>Parameters:</p> <ul> <li> <code>status</code>             (<code>int</code>)         \u2013          <p>result of NV200D.status</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>active statuses</p> </li> </ul>"}]}